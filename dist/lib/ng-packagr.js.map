{"version":3,"file":"ng-packagr.js","sourceRoot":"","sources":["../../src/lib/ng-packagr.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,uCAAgD;AAChD,0CAAuC;AACvC,sCAAwC;AACxC,qEAA4D;AAE5D,SAAS;AACT,8DAAqD;AAOrD,UAAU;AACV,kCAAkC;AAGlC,yBAAsC,IAAkB;;QACtD,GAAG,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAErC,IAAI,SAAoB,CAAC;QACzB,IAAI,CAAC;YACH,qFAAqF;YACrF,SAAS,GAAG,MAAM,uBAAgB,CAAC,IAAI,CAAC,CAAC;YAEzC,wFAAwF;YACxF,MAAM,eAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAE7B,MAAM,SAAS,GAAG,IAAI,2BAAS,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAC9D,MAAM,yCAAgB,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,CAAC,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC;YACrF,GAAG,CAAC,CAAC,MAAM,SAAS,IAAI,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC9C,MAAM,SAAS,GAAG,IAAI,2BAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;gBACtD,MAAM,yCAAgB,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC;YAC/E,CAAC;YAED,MAAM,gBAAS,CAAC,GAAG,SAAS,CAAC,GAAG,YAAY,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;YAC9D,MAAM,gBAAS,CAAC,GAAG,SAAS,CAAC,GAAG,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;YAE5D,GAAG,CAAC,OAAO,CAAC;WACL,SAAS,CAAC,GAAG;WACb,SAAS,CAAC,IAAI;KACpB,CAAC,CAAC;QACL,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,uDAAuD;YACvD,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjB,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBACnC,MAAM,eAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YAC3C,CAAC;QACH,CAAC;IACH,CAAC;CAAA;AAlCD,0CAkCC","sourcesContent":["// BUILD STEP IMPLEMENTATIONS\nimport { discoverPackages } from './steps/init';\nimport { rimraf } from './util/rimraf';\nimport { copyFiles } from './util/copy';\nimport { transformSources } from './entry-point-transforms';\n\n// Domain\nimport { Artefacts } from './domain/build-artefacts';\nimport { CliArguments } from './domain/cli-arguments';\nimport { NgPackage } from './domain/ng-package-format';\n\n// Node API\nimport * as path from 'path';\n\n// Logging\nimport * as log from './util/log';\n\n\nexport async function createNgPackage(opts: CliArguments): Promise<void> {\n  log.info(`Building Angular Package`);\n\n  let ngPackage: NgPackage;\n  try {\n    // READ `NgPackage` from either 'package.json', 'ng-package.json', or 'ng-package.js'\n    ngPackage = await discoverPackages(opts);\n\n    // clean the primary dest folder (should clean all secondary module directories as well)\n    await rimraf(ngPackage.dest);\n\n    const artefacts = new Artefacts(ngPackage.primary, ngPackage);\n    await transformSources({ artefacts, entryPoint: ngPackage.primary, pkg: ngPackage });\n    for (const secondary of ngPackage.secondaries) {\n      const artefacts = new Artefacts(secondary, ngPackage);\n      await transformSources({ artefacts, entryPoint: secondary, pkg: ngPackage });\n    }\n\n    await copyFiles(`${ngPackage.src}/README.md`, ngPackage.dest);\n    await copyFiles(`${ngPackage.src}/LICENSE`, ngPackage.dest);\n\n    log.success(`Built Angular Package!\n - from: ${ngPackage.src}\n - to:   ${ngPackage.dest}\n    `);\n  } catch (error) {\n    // Report error messages and throw the error further up\n    log.error(error);\n    throw error;\n  } finally {\n    if (ngPackage && !process.env.KEEP) {\n      await rimraf(ngPackage.workingDirectory);\n    }\n  }\n}\n"]}