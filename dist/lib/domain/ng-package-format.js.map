{"version":3,"file":"ng-package-format.js","sourceRoot":"","sources":["../../../src/lib/domain/ng-package-format.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport { SchemaClass } from '@ngtools/json-schema';\nimport { NgPackageConfig } from '../../ng-package.schema';\n\n/**\n * An Angular package being built.\n *\n * #### Representation in the domain\n *\n * Angular Package Format defines the terms _Package_ and _Entry Point_.\n * A _Package_ is a \"set of files that are published to NPM and installed together\".\n * An _Entry Point_ is \"referenced by a unique module ID and exports the public API referenced\n * by that module ID. An example is @angular/core or @angular/core/testing. Both entry points\n * exist in the @angular/core package, but they export different symbols. A package can have\n * many entry points.\"\n *\n * The term 'Package' is reflected by the domain class `NgPackage`.\n * An `NgPackage` is transformed to exactly one distribution-ready npm package.\n * Further, an `NgPackage` is composed of at least one entrypoint, one primary entry point and\n * zero or more secondary entry points.\n * Each of those entrypoints is reflected by `NgLibrary` and is considered the root of the source\n * code compilation / transformation process.\n *\n * #### Watch Out\n *\n * The user's configuration `ngPackage` suggests that the configuration object is reflected by\n * `NgPackage`. Is is not.\n *\n * The user's `ngPackage` configueation is represented in `NgEntryPoint`. In case of the\n * _Package_ (`NgPackage`), the configuration is reflected in the primary `NgEntryPoint`.\n *\n * @link https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#\n */\nexport class NgPackage {\n\n  constructor(\n    private readonly basePath: string,\n\n    /**\n     * A reference to the primary entry point.\n     */\n    public readonly primary: NgEntryPoint,\n\n    /**\n     * An array of seconary entry points.\n     */\n    public readonly secondaries: NgEntryPoint[] = []\n  ) {}\n\n  /** Absolute path of the package's source directory. */\n  public get src(): DirectoryPath {\n    return this.absolutePathFromPrimary('src');\n  }\n\n  /** Absolute path of the package's destination directory. */\n  public get dest(): DirectoryPath {\n    return this.absolutePathFromPrimary('dest');\n  }\n\n  /** Absolute path of the package's working directory (used for intermediate file storage). */\n  public get workingDirectory(): DirectoryPath {\n    return this.absolutePathFromPrimary('workingDirectory');\n  }\n\n  private absolutePathFromPrimary(key: string) {\n    return path.resolve(this.basePath, this.primary.$get(key));\n  }\n\n}\n\n/**\n * An Angular library being compiled and transpiled to Angular Package Format.\n *\n * #### Relationship in the domain\n *\n * _TBD_ the thing that - in effect - gets compiled from `*.ts`, `*.html`, `*.css` (and so on)\n * to FESM'5, FESM2015, UMD, AoT metadata, typings.\n *\n * An `NgEntryPoint` serves as the root of a library's source tree.\n * During the compilation process (a tree transformation / transformation pipeline) it will be\n * transpiled to a set of artefacts such as a FESM'5 bundle, a FESM2015 bundle, AoT metadata,\n * and so on.\n * The set of artefacts is reflected in `NgArtefacts`.\n */\nexport class NgEntryPoint {\n\n  constructor(\n    public readonly packageJson: any,\n    public readonly ngPackageJson: NgPackageConfig,\n    private readonly $schema: SchemaClass<NgPackageConfig>,\n    private basePath: string,\n    private readonly secondaryData?: { [key: string]: any }\n  ) {}\n\n  /** Absolute file path of the entry point's source code entry file. */\n  public get entryFilePath(): SourceFilePath {\n    return path.resolve(this.basePath, this.entryFile);\n  }\n\n  /** Absolute directory path of the entry point's 'package.json'. */\n  public get destinationPath(): DirectoryPath {\n    if (this.secondaryData) {\n      return this.secondaryData.destinationPath;\n    } else {\n      return path.resolve(this.basePath, this.$get('dest'));\n    }\n  }\n\n  public $get(key: string): any {\n    return this.$schema.$$get(key);\n  }\n\n  public get src(): SourceFilePath {\n    return this.$get('src');\n  }\n\n  public get paths(): any {\n    return this.$get('paths');\n  }\n\n  public get entryFile(): SourceFilePath {\n    return this.$get('lib.entryFile');\n  }\n\n  public get cssUrl(): CssUrl {\n    return this.$get('lib.cssUrl');\n  }\n\n  public get externals(): { [key: string]: string } {\n    return this.$get('lib.externals');\n  }\n\n  public get jsxConfig(): string {\n    return this.$get('lib.jsx');\n  }\n\n  public get flatModuleFile(): string {\n    return this.$get('lib.flatModuleFile') || this.flattenModuleId('-');\n  }\n\n  /**\n   * The module ID is an \"identifier of a module used in the import statements, e.g.\n   * '@angular/core'. The ID often maps directly to a path on the filesystem, but this\n   * is not always the case due to various module resolution strategies.\"\n   */\n  public get moduleId(): string {\n    if (this.secondaryData) {\n      return this.secondaryData.moduleId;\n    } else {\n      return this.packageJson['name'];\n    }\n  }\n\n  /**\n   * The UMD module ID is a string value used for registering the module on the old-fashioned\n   * JavaScript global scope.\n   * Example: `@my/foo/bar` registers as `global['my']['foo']['bar']`.\n   */\n  public get umdModuleId(): string {\n    return this.flattenModuleId();\n  }\n\n  private flattenModuleId(separator: string = '.') {\n    if (this.moduleId.startsWith('@')) {\n      return this.moduleId.substring(1).split('/').join(separator);\n    } else {\n      return this.moduleId.split('/').join(separator);\n    }\n  }\n\n}\n\n\n/**\n * The (source code) entry file of an entry point.\n *\n * Typically, an entry point refers to the `public_api.ts` source file, referencing all other\n * source files that are considered in the compilation (transformation) process, as well as\n * describing the API surface of a library.\n */\nexport type SourceFilePath = string;\n\nexport type DirectoryPath = string;\n\nexport enum CssUrl {\n  inline = 'inline',\n  none = 'none'\n}\n"]}